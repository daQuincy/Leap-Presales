{"version":3,"sources":["App.js","index.js"],"names":["provider","signer","pluto","undefined","window","ethereum","enable","then","ethers","providers","Web3Provider","App","useState","connection","setConnection","totalContribution","setTotalContribution","chainID","setChainID","allowBuy","setAllowBuy","presalesStart","setPresalesStart","presalesEnd","setPresalesEnd","capReached","setCapReached","indvCap","setIndvCap","beneficiary","setBeneficiary","beneContributed","setBeneContributed","beneTokensAmount","setBeneTokensAmount","contribution","setContribution","valBeneficiary","setValBeneficiary","valContribution","setValContribution","buyButtonLoading","setBuyButtonLoading","refundButtonLoading","setRefundButtonLoading","withdrawButtonLoading","setWithdrawButtonLoading","txnLink","setTxnLink","txnHash","setTxnHash","contributed","setContributed","tokensAmount","setTokenAmounts","useEffect","load","setInterval","a","getNetwork","_chainID","getAddress","_address","getTokens","_tokensAmount","utils","formatUnits","getContribution","_contributed","formatEther","weiRaised","_totalContribution","getPresalesStarted","_presalesStart","getPresalesEnded","_presalesEnd","_capReached","_allowBuy","getSigner","Contract","Pluto","networks","address","abi","init","clearInterval","buyPresalesTokens","e","preventDefault","gasLimit","value","tx","wait","txLink","hash","withdrawPresalesTokens","refundCapNotReached","refund","handleBeneficiary","_beneficiary","target","valid","isAddress","handleContribution","_contribution","_individualCap","parseFloat","parseEther","className","Message","hidden","error","header","content","info","Form","Field","Input","onChange","placeholder","label","labelPosition","disabled","Button","primary","loading","onClick","Card","Group","description","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a99bf325.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { ethers, Contract , utils} from 'ethers';\nimport { Form, Input, Message, Button, Card } from 'semantic-ui-react';\nimport Pluto from './contracts/Pluto.json';\nimport 'semantic-ui-css/semantic.min.css'\n\n// if use this, it does not connect to metamask after build\n//const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n// https://stackoverflow.com/questions/60785630/how-to-connect-ethers-js-with-metamask\nlet provider, signer, pluto;\n\nif (window.ethereum === undefined) {\n  provider = undefined;\n  signer = undefined;\n  pluto = undefined;\n} else {\n  window.ethereum.enable().then(provider = new ethers.providers.Web3Provider(window.ethereum, \"any\"));\n}\n\n\nfunction App() {\n  const [connection, setConnection] = useState(false);\n  const [totalContribution, setTotalContribution] = useState(0);\n  const [chainID, setChainID] = useState(undefined);\n\n  const [allowBuy, setAllowBuy] = useState(false);\n  const [presalesStart, setPresalesStart] = useState(false);\n  const [presalesEnd, setPresalesEnd] = useState(false);\n  const [capReached, setCapReached] = useState(false);\n  const [indvCap, setIndvCap] = useState(false);\n\n  // beneficiary's stats\n  const [beneficiary, setBeneficiary] = useState(undefined);\n  const [beneContributed, setBeneContributed] = useState(0);\n  const [beneTokensAmount, setBeneTokensAmount] = useState(0);\n  \n  const [contribution, setContribution] = useState(0);\n  const [valBeneficiary, setValBeneficiary] = useState(false);\n  const [valContribution, setValContribution] = useState(false);\n\n  const [buyButtonLoading, setBuyButtonLoading] = useState(false);\n  const [refundButtonLoading, setRefundButtonLoading] = useState(false);\n  const [withdrawButtonLoading, setWithdrawButtonLoading] = useState(false);\n\n  const [txnLink, setTxnLink] = useState(undefined);\n  const [txnHash, setTxnHash] = useState(undefined);\n\n  // current wallet's stats\n  const [contributed, setContributed] = useState(0);\n  const [tokensAmount, setTokenAmounts] = useState(0);\n\n  useEffect(() => {\n    const load = setInterval(async () => {\n      if (provider !== undefined) {\n        const _chainID = (await provider.getNetwork())[\"chainId\"];\n        if (_chainID === 97 || _chainID === 56){\n          setConnection(true);\n          const _address = await signer.getAddress();\n\n          let _tokensAmount = await pluto.getTokens(_address);\n          _tokensAmount = utils.formatUnits(_tokensAmount, 9);\n\n          let _contributed = await pluto.getContribution(_address);\n          _contributed = utils.formatEther(_contributed);\n\n          let _totalContribution = await pluto.weiRaised();\n          _totalContribution = utils.formatEther(_totalContribution);\n\n          const _presalesStart = await pluto.getPresalesStarted();\n          const _presalesEnd = await pluto.getPresalesEnded();\n          const _capReached = await pluto.capReached();\n\n          const _allowBuy = _presalesStart && !_presalesEnd;\n\n          setTokenAmounts(_tokensAmount);\n          setContributed(_contributed);\n          setTotalContribution(_totalContribution);\n          setPresalesStart(_presalesStart);\n          setPresalesEnd(_presalesEnd);\n          setAllowBuy(_allowBuy);\n          setCapReached(_capReached);\n        } else {\n          setConnection(false);\n        }\n      } else {\n        setConnection(false);\n      }\n    }, 1000);\n\n    const init = async () => {\n      if (provider !== undefined) {\n        const _chainID = (await provider.getNetwork())[\"chainId\"];\n        signer = provider.getSigner();\n\n        pluto = new Contract(\n          Pluto.networks[_chainID].address,\n          Pluto.abi,\n          signer\n        );\n\n        setChainID(_chainID);\n      } else {\n        signer = undefined;\n        pluto = undefined;\n      }\n    }\n\n    init();\n\n    return () => clearInterval(load);\n  }, []);\n\n  const buyPresalesTokens = async (e) => {\n    e.preventDefault();\n    setBuyButtonLoading(true);\n    const tx = await pluto.buyPresalesTokens(beneficiary, {gasLimit: 500000, value: contribution});\n    await tx.wait();\n\n    let txLink;\n    if (chainID === 97) {\n      txLink = \"https://testnet.bscscan.com/tx/\" + tx.hash;\n    } else if (chainID === 56) {\n      txLink = \"https://bscscan.com/tx/\" + tx.hash;\n    };\n\n    let _tokensAmount = await pluto.getTokens(beneficiary);\n    _tokensAmount = utils.formatUnits(_tokensAmount, 9);\n\n    let _contributed = await pluto.getContribution(beneficiary);\n    _contributed = utils.formatEther(_contributed);\n    \n    setBeneContributed(_contributed);\n    setBeneTokensAmount(_tokensAmount);\n    setTxnHash(tx.hash);\n    setTxnLink(txLink);\n    setBuyButtonLoading(false);\n  }\n\n  const withdrawPresalesTokens = async (e) => {\n    e.preventDefault();\n    setWithdrawButtonLoading(true);\n    const tx = await pluto.withdrawPresalesTokens(beneficiary, {gasLimit: 500000});\n    await tx.wait();\n\n    let txLink;\n    if (chainID === 97) {\n      txLink = \"https://testnet.bscscan.com/tx/\" + tx.hash;\n    } else if (chainID === 56) {\n      txLink = \"https://bscscan.com/tx/\" + tx.hash;\n    };\n\n    setTxnHash(tx.hash);\n    setTxnLink(txLink);\n    setWithdrawButtonLoading(false);\n  }\n\n  const refundCapNotReached = async (e) => {\n    e.preventDefault();\n    setRefundButtonLoading(true);\n    const tx = await pluto.refund(beneficiary, {gasLimit: 500000});\n    await tx.wait();\n\n    let txLink;\n    if (chainID === 97) {\n      txLink = \"https://testnet.bscscan.com/tx/\" + tx.hash;\n    } else if (chainID === 56) {\n      txLink = \"https://bscscan.com/tx/\" + tx.hash;\n    };\n\n    setTxnHash(tx.hash);\n    setTxnLink(txLink);\n    setRefundButtonLoading(false);\n  }\n\n  const handleBeneficiary = async (e) => {\n    let _beneficiary = e.target.value;\n    const valid = utils.isAddress(_beneficiary);\n    try {\n      if (valid) {\n        _beneficiary = utils.getAddress(_beneficiary);\n\n        let _tokensAmount = await pluto.getTokens(_beneficiary);\n        _tokensAmount = utils.formatUnits(_tokensAmount, 9);\n\n        let _contributed = await pluto.getContribution(_beneficiary);\n        _contributed = utils.formatEther(_contributed);\n        \n        setBeneContributed(_contributed);\n        setBeneTokensAmount(_tokensAmount);\n        setValBeneficiary(true);\n        setBeneficiary(_beneficiary);\n      } else {\n        setValBeneficiary(false);\n        setBeneficiary(0);\n      }\n    } catch {\n      setValBeneficiary(false);\n      setBeneficiary(0);\n    }\n  }\n\n  const handleContribution = async (e) => {\n    let _contribution = e.target.value;\n    try {\n      if (_contribution <= 0 || _contribution > 0.5) {\n        setValContribution(false);\n        setContribution(0);\n        setIndvCap(false);\n      } else {\n        let _contributed = await pluto.getContribution(beneficiary);\n        _contributed = utils.formatEther(_contributed);\n        const _individualCap = parseFloat(_contribution) + parseFloat(_contributed);\n        if (_individualCap > 0.5) {\n          setIndvCap(true);\n        } else {\n          setIndvCap(false);\n        }\n        _contribution = utils.parseEther(_contribution);\n        \n        setValContribution(true);\n        setContribution(_contribution);\n      }\n    } catch {\n      setValContribution(false);\n      setContribution(0);\n      setIndvCap(false);\n    }\n  }\n  \n  return (\n    <div className=\"App\">\n      <h1>Presales</h1>\n      <br></br>\n\n      <Message hidden={connection} error={!connection} header=\"Opps!\" content={\"Please connect to BSC through Metamask!\"} />\n\n      <Message info hidden={presalesStart || !connection} header=\"Presales has not started yet\" />\n      <Message info hidden={!presalesEnd} header=\"Presales has already ended\" />\n      <Message header={\"Current Total Contribution\"} content={totalContribution + \" BNB\"} />\n \n      <Form>\n        <Form.Field>\n            <label>Beneficiary Address</label>\n            <Input\n                onChange={handleBeneficiary}\n                placeholder=\"Enter a valid BNB address\"\n            />\n\n            <label>Amount to Contribute</label>\n            <Input\n              onChange={handleContribution}\n              placeholder=\"MAX: 0.5 BNB per address (cumulative)\"\n              label=\"BNB\"\n              labelPosition=\"right\"\n              disabled={presalesEnd}\n            />\n\n            <Button primary disabled={!valContribution || !valBeneficiary || !allowBuy || !connection} loading={buyButtonLoading} onClick={buyPresalesTokens}>\n              Buy Tokens!\n            </Button>\n\n            <Button primary disabled={!(presalesEnd && capReached) || !valBeneficiary || !connection} loading={withdrawButtonLoading} onClick={withdrawPresalesTokens}>\n              Withdraw\n            </Button>\n\n            <Button primary disabled={!(presalesEnd && !capReached) || !valBeneficiary || !connection} loading={refundButtonLoading} onClick={refundCapNotReached}>\n              Refund\n            </Button>\n        </Form.Field>\n      </Form>\n\n      <Message hidden={!indvCap} error={true} header=\"Exceed individual limit!\" content={\"This transaction will fail because you exceeded individual limit. Enter a lower amount\"} />\n\n      <Card.Group>\n        <Card\n          header=\"Your stats\"\n          description={\n            <div>\n              <p>\n                Tokens bought: {tokensAmount}\n              </p>\n              <p>\n                BNB contributed: {contributed}\n              </p>\n            </div>\n          }\n        />\n\n        <Card\n          header=\"Beneficiary's stats\"\n          description={\n            <div>\n              <p>\n                Tokens bought: {beneTokensAmount}\n              </p>\n              <p>\n                BNB contributed: {beneContributed}\n              </p>\n            </div>\n          }\n        />\n      </Card.Group>\n\n      <h3>\n        Transaction hash: <a href={txnLink}>{txnHash ?  txnHash : \" \"}</a>\n      </h3>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}