{"version":3,"sources":["App.js","index.js"],"names":["provider","window","ethereum","enable","then","ethers","providers","Web3Provider","signer","getSigner","pluto","Contract","Pluto","abi","App","chainID","useState","connection","setConnection","totalContribution","setTotalContribution","undefined","beneficiary","setBeneficiary","contribution","setContribution","valBeneficiary","setValBeneficiary","valContribution","setValContribution","buttonLoading","setButtonLoading","address","setAddress","setTxnLink","txnHash","setTxnHash","tokensAmount","setTokenAmounts","useEffect","init","setInterval","a","getNetwork","getAddress","_address","getTokens","_tokensAmount","div","weiRaised","_totalContribution","utils","formatEther","toString","clearInterval","buyPresalesTokens","e","preventDefault","gasLimit","value","tx","wait","txLink","hash","className","Message","hidden","error","header","content","Form","onSubmit","Field","Input","onChange","_beneficiary","target","valid","isAddress","_contribution","parseEther","label","labelPosition","Button","primary","disabled","loading","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c7b0013.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { ethers, Contract , utils} from 'ethers';\nimport { Form, Input, Message, Button } from 'semantic-ui-react';\nimport Pluto from './contracts/Pluto.json';\nimport 'semantic-ui-css/semantic.min.css'\n\n// if use this, it does not connect to metamask after build\n//const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n// https://stackoverflow.com/questions/60785630/how-to-connect-ethers-js-with-metamask\nlet provider;\nwindow.ethereum.enable().then(provider = new ethers.providers.Web3Provider(window.ethereum, \"any\"));\nconst signer = provider.getSigner();\n\nconst pluto = new Contract(\n  \"0xB22dee4B962303D42b4fC04B0eEc7429CE512239\",\n  Pluto.abi,\n  signer\n);\n\nfunction App() {\n  const [connection, setConnection] = useState(false);\n  const [totalContribution, setTotalContribution] = useState(0);\n\n  const [beneficiary, setBeneficiary] = useState(undefined);\n  const [contribution, setContribution] = useState(0);\n  const [valBeneficiary, setValBeneficiary] = useState(false);\n  const [valContribution, setValContribution] = useState(false);\n\n  const [buttonLoading, setButtonLoading] = useState(false);\n\n  const [address, setAddress] = useState(undefined);\n  const [txnLink, setTxnLink] = useState(undefined);\n  const [txnHash, setTxnHash] = useState(undefined);\n  const [tokensAmount, setTokenAmounts] = useState(0);\n\n  let chainID;\n\n  useEffect(() => {\n    const init = setInterval(async () => {\n      chainID = (await provider.getNetwork())[\"chainId\"];\n      if (chainID === 97 || chainID === 56){\n        setConnection(true);\n        const _address = await signer.getAddress();\n\n        let _tokensAmount = await pluto.getTokens(_address);\n        _tokensAmount = _tokensAmount.div(1000000000);\n\n        let _totalContribution = await pluto.weiRaised();\n        _totalContribution = utils.formatEther(_totalContribution);\n\n        setTokenAmounts(_tokensAmount.toString());\n        setTotalContribution(_totalContribution);\n        setAddress(_address);\n      } else {\n        setConnection(false)\n      }\n    }, 1000);\n    return () => clearInterval(init);\n  }, []);\n\n  const buyPresalesTokens = async (e) => {\n    e.preventDefault();\n    setButtonLoading(true);\n    const tx = await pluto.buyPresalesTokens(beneficiary, {gasLimit: 500000, value: contribution});\n    await tx.wait();\n    let _tokensAmount = await pluto.getTokens(address);\n    _tokensAmount = _tokensAmount.div(1000000000);\n\n    let txLink;\n    if (chainID === 97) {\n      txLink = \"https://testnet.bscscan.com/tx/\" + tx.hash;\n    } else if (chainID === 56) {\n      txLink = \"https://bscscan.com/tx/\" + tx.hash;\n    };\n    setTokenAmounts(_tokensAmount.toString());\n    setTxnHash(tx.hash);\n    setTxnLink(txLink);\n    setButtonLoading(false);\n  }\n\n  const handleBeneficiary = (e) => {\n    let _beneficiary = e.target.value;\n    const valid = utils.isAddress(_beneficiary);\n    try {\n      if (valid) {\n        _beneficiary = utils.getAddress(_beneficiary);\n        setValBeneficiary(true);\n        setBeneficiary(_beneficiary);\n      } else {\n        setValBeneficiary(false);\n        setBeneficiary(0);\n      }\n    } catch {\n      setValBeneficiary(false);\n      setBeneficiary(0);\n    }\n  }\n\n  const handleContribution = (e) => {\n    let _contribution = e.target.value;\n    try {\n      if (_contribution <= 0 || _contribution > 0.5) {\n        setValContribution(false);\n        setContribution(0);\n      } else {\n        const contribution = utils.parseEther(e.target.value);\n        setValContribution(true);\n        setContribution(contribution);\n      }\n    } catch {\n      setValContribution(false);\n      setContribution(0)\n    }\n  }\n  \n  return (\n    <div className=\"App\">\n      <h1>Presales</h1>\n      <br></br>\n\n      <Message hidden={connection} error={!connection} header=\"Opps!\" content={\"Please connect to BSC through Metamask!\"} />\n\n      <Message header={\"Current Total Contribution\"} content={totalContribution + \" BNB\"} />\n \n      <Form onSubmit={buyPresalesTokens}>\n        <Form.Field>\n            <label>Beneficiary Address</label>\n            <Input\n                onChange={handleBeneficiary}\n            />\n\n            <label>Amount to Contribute</label>\n            <Input\n              onChange={handleContribution}\n              label=\"BNB\"\n              labelPosition=\"right\"\n            />\n\n            <Button primary disabled={(!valContribution || !valBeneficiary)} loading={buttonLoading}>\n              Buy Tokens!\n            </Button>\n        </Form.Field>\n      </Form>\n\n      <h3>\n        Tokens you bought: {tokensAmount}\n      </h3>\n\n      <h3>\n        Transaction hash: {txnHash ? <a href={txnHash}></a> : \" \"}\n      </h3>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}