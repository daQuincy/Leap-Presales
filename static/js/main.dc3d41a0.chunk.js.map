{"version":3,"sources":["ethereum.js","App.js","index.js"],"names":["getBlockchain","Promise","resolve","reject","a","detectEthereumProvider","provider","request","method","networkId","ethers","providers","Web3Provider","signer","getSigner","pluto","Contract","Pluto","networks","address","abi","App","useState","undefined","setPluto","useEffect","init","buy","e","preventDefault","target","elements","value","contribution","utils","parseEther","buyPresalesTokens","gasLimit","tx","wait","className","onSubmit","type","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAuBeA,EAnBO,kBACpB,IAAIC,QAAJ,uCAAa,WAAOC,EAASC,GAAhB,qBAAAC,EAAA,sEACUC,MADV,YACPC,EADO,yCAGHA,EAASC,QAAQ,CAAEC,OAAQ,wBAHxB,uBAIeF,EAASC,QAAQ,CAAEC,OAAQ,gBAJ1C,cAIHC,EAJG,OAKTH,EAAW,IAAII,IAAOC,UAAUC,aAAaN,GACvCO,EAASP,EAASQ,YAClBC,EAAQ,IAAIC,IAChBC,EAAMC,SAAST,GAAWU,QAC1BF,EAAMG,IACNP,GAEFX,EAAQ,CAACa,UAZA,2BAeXZ,EAAO,oBAfI,4CAAb,0D,QCuDakB,MAxDf,WAAgB,IAAD,EACaC,wBAASC,GADtB,mBACNR,EADM,KACCS,EADD,KAGbC,qBAAU,YACE,uCAAG,8BAAArB,EAAA,sEACaJ,IADb,gBACHe,EADG,EACHA,MACRS,EAAST,GAFE,2CAAH,qDAIVW,KACC,IAEH,IAAMC,EAAG,uCAAG,WAAMC,GAAN,mBAAAxB,EAAA,6DACVwB,EAAEC,iBACIV,EAAUS,EAAEE,OAAOC,SAAS,GAAGC,MAC/BC,EAAeC,QAAMC,WAAWP,EAAEE,OAAOC,SAAS,GAAGC,OAHjD,SAIOjB,EAAMqB,kBAAkBjB,EAAS,CAACkB,SAAU,IAAQL,MAAOC,IAJlE,cAIJK,EAJI,gBAKJA,EAAGC,OALC,2CAAH,sDAQT,MACmB,qBAAVxB,EAEA,aAIP,qBAAKyB,UAAU,YAAf,SACE,qBAAKA,UAAU,MAAf,SAEE,sBAAKA,UAAU,WAAf,UACE,qDACA,uBAAMA,UAAU,cAAcC,SAAU,SAAAb,GAAC,OAAID,EAAIC,IAAjD,UACE,uBACEc,KAAK,OACLF,UAAU,eACVG,YAAY,YAEd,uBACED,KAAK,OACLF,UAAU,eACVG,YAAY,iBAEd,wBACED,KAAK,SACLF,UAAU,kBAFZ,+BCzCZI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.dc3d41a0.chunk.js","sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider';\nimport { ethers, Contract } from 'ethers';\nimport Pluto from './contracts/Pluto.json';\n\nconst getBlockchain = () =>\n  new Promise( async (resolve, reject) => {\n    let provider = await detectEthereumProvider();\n    if(provider) {\n      await provider.request({ method: 'eth_requestAccounts' });\n      const networkId = await provider.request({ method: 'net_version' })\n      provider = new ethers.providers.Web3Provider(provider);\n      const signer = provider.getSigner();\n      const pluto = new Contract(\n        Pluto.networks[networkId].address,\n        Pluto.abi,\n        signer\n      );\n      resolve({pluto});\n      return;\n    }\n    reject('Install Metamask');\n  });\n\nexport default getBlockchain;\n","import React, { useState, useEffect } from 'react';\nimport { utils } from 'ethers';\nimport getBlockchain from './ethereum.js';\n\nfunction App() {\n  const [pluto, setPluto] = useState(undefined);\n\n  useEffect(() => {\n    const init = async () => {\n      const { pluto } = await getBlockchain();\n      setPluto(pluto);\n    };\n    init();\n  }, []);\n\n  const buy = async e => {\n    e.preventDefault();\n    const address = e.target.elements[0].value;\n    const contribution = utils.parseEther(e.target.elements[1].value);\n    const tx = await pluto.buyPresalesTokens(address, {gasLimit: 500000, value: contribution});\n    await tx.wait();\n  };\n\n  if(\n    typeof pluto === 'undefined'\n  ) {\n    return 'Loading...';\n  }\n\n  return (\n    <div className='container'>\n      <div className='row'>\n\n        <div className='col-sm-6'>\n          <h2>Buy Presales Tokens</h2>\n          <form className=\"form-inline\" onSubmit={e => buy(e)}>\n            <input \n              type=\"text\" \n              className=\"form-control\" \n              placeholder=\"Address\"\n            />\n            <input \n              type=\"text\" \n              className=\"form-control\" \n              placeholder=\"Contribution\"\n            />\n            <button \n              type=\"submit\" \n              className=\"btn btn-primary\"\n            >\n              Submit\n            </button>\n          </form>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}