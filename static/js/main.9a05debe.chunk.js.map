{"version":3,"sources":["App.js","index.js"],"names":["provider","signer","pluto","window","ethereum","enable","then","ethers","providers","Web3Provider","getSigner","Contract","Pluto","abi","App","useState","connection","setConnection","totalContribution","setTotalContribution","undefined","chainID","setChainId","allowBuy","setAllowBuy","presalesStart","setPresalesStart","presalesEnd","setPresalesEnd","beneficiary","setBeneficiary","contribution","setContribution","valBeneficiary","setValBeneficiary","valContribution","setValContribution","buttonLoading","setButtonLoading","address","setAddress","txnLink","setTxnLink","txnHash","setTxnHash","tokensAmount","setTokenAmounts","useEffect","init","setInterval","a","getNetwork","_chainID","getAddress","_address","getTokens","_tokensAmount","div","weiRaised","_totalContribution","utils","formatEther","getPresalesStarted","_presalesStart","getPresalesEnded","_presalesEnd","_allowBuy","toString","clearInterval","buyPresalesTokens","e","preventDefault","gasLimit","value","tx","wait","txLink","hash","className","Message","hidden","error","header","content","info","Form","onSubmit","Field","Input","onChange","_beneficiary","target","valid","isAddress","placeholder","_contribution","parseEther","label","labelPosition","Button","primary","disabled","loading","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a05debe.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { ethers, Contract , utils} from 'ethers';\nimport { Form, Input, Message, Button } from 'semantic-ui-react';\nimport Pluto from './contracts/Pluto.json';\nimport 'semantic-ui-css/semantic.min.css'\n\n// if use this, it does not connect to metamask after build\n//const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n// https://stackoverflow.com/questions/60785630/how-to-connect-ethers-js-with-metamask\nlet provider, signer, pluto;\nwindow.ethereum.enable().then(provider = new ethers.providers.Web3Provider(window.ethereum, \"any\"));\nsigner = provider.getSigner();\n\npluto = new Contract(\n  \"0xB22dee4B962303D42b4fC04B0eEc7429CE512239\",\n  Pluto.abi,\n  signer\n);\n\n\nfunction App() {\n  const [connection, setConnection] = useState(false);\n  const [totalContribution, setTotalContribution] = useState(0);\n  const [chainID, setChainId] = useState(undefined);\n  const [allowBuy, setAllowBuy] = useState(false);\n  const [presalesStart, setPresalesStart] = useState(false);\n  const [presalesEnd, setPresalesEnd] = useState(false);\n\n  const [beneficiary, setBeneficiary] = useState(undefined);\n  const [contribution, setContribution] = useState(0);\n  const [valBeneficiary, setValBeneficiary] = useState(false);\n  const [valContribution, setValContribution] = useState(false);\n\n  const [buttonLoading, setButtonLoading] = useState(false);\n\n  const [address, setAddress] = useState(undefined);\n  const [txnLink, setTxnLink] = useState(undefined);\n  const [txnHash, setTxnHash] = useState(undefined);\n  const [tokensAmount, setTokenAmounts] = useState(0);\n\n  useEffect(() => {\n    const init = setInterval(async () => {\n      if (provider !== undefined) {\n        const _chainID = (await provider.getNetwork())[\"chainId\"];\n        if (_chainID === 97 || _chainID === 56){\n          setConnection(true);\n          const _address = await signer.getAddress();\n\n          let _tokensAmount = await pluto.getTokens(_address);\n          _tokensAmount = _tokensAmount.div(1000000000);\n\n          let _totalContribution = await pluto.weiRaised();\n          _totalContribution = utils.formatEther(_totalContribution);\n\n          const _presalesStart = await pluto.getPresalesStarted();\n          const _presalesEnd = await pluto.getPresalesEnded();\n\n          const _allowBuy = _presalesStart && !_presalesEnd;\n\n          setTokenAmounts(_tokensAmount.toString());\n          setTotalContribution(_totalContribution);\n          setAddress(_address);\n          setChainId(_chainID);\n          setPresalesStart(_presalesStart);\n          setPresalesEnd(_presalesEnd);\n          setAllowBuy(_allowBuy);\n        } else {\n          setConnection(false);\n        }\n      } else {\n        setConnection(false);\n      }\n    }, 1000);\n    return () => clearInterval(init);\n  }, []);\n\n  const buyPresalesTokens = async (e) => {\n    e.preventDefault();\n    setButtonLoading(true);\n    const tx = await pluto.buyPresalesTokens(beneficiary, {gasLimit: 500000, value: contribution});\n    await tx.wait();\n    let _tokensAmount = await pluto.getTokens(address);\n    _tokensAmount = _tokensAmount.div(1000000000);\n\n    let txLink;\n    if (chainID === 97) {\n      txLink = \"https://testnet.bscscan.com/tx/\" + tx.hash;\n    } else if (chainID === 56) {\n      txLink = \"https://bscscan.com/tx/\" + tx.hash;\n    };\n    setTokenAmounts(_tokensAmount.toString());\n    setTxnHash(tx.hash);\n    setTxnLink(txLink);\n    setButtonLoading(false);\n  }\n\n  const handleBeneficiary = (e) => {\n    let _beneficiary = e.target.value;\n    const valid = utils.isAddress(_beneficiary);\n    try {\n      if (valid) {\n        _beneficiary = utils.getAddress(_beneficiary);\n        setValBeneficiary(true);\n        setBeneficiary(_beneficiary);\n      } else {\n        setValBeneficiary(false);\n        setBeneficiary(0);\n      }\n    } catch {\n      setValBeneficiary(false);\n      setBeneficiary(0);\n    }\n  }\n\n  const handleContribution = (e) => {\n    let _contribution = e.target.value;\n    try {\n      if (_contribution <= 0 || _contribution > 0.5) {\n        setValContribution(false);\n        setContribution(0);\n      } else {\n        const contribution = utils.parseEther(e.target.value);\n        setValContribution(true);\n        setContribution(contribution);\n      }\n    } catch {\n      setValContribution(false);\n      setContribution(0)\n    }\n  }\n  \n  return (\n    <div className=\"App\">\n      <h1>Presales</h1>\n      <br></br>\n\n      <Message hidden={connection} error={!connection} header=\"Opps!\" content={\"Please connect to BSC through Metamask!\"} />\n\n      <Message info hidden={presalesStart} header=\"Presales has not started yet\" />\n      <Message info hidden={!presalesEnd} header=\"Presales has already ended\" />\n      <Message header={\"Current Total Contribution\"} content={totalContribution + \" BNB\"} />\n \n      <Form onSubmit={buyPresalesTokens}>\n        <Form.Field>\n            <label>Beneficiary Address</label>\n            <Input\n                onChange={handleBeneficiary}\n                placeholder=\"Enter a valid BNB address\"\n            />\n\n            <label>Amount to Contribute</label>\n            <Input\n              onChange={handleContribution}\n              placeholder=\"MAX: 0.5 BNB\"\n              label=\"BNB\"\n              labelPosition=\"right\"\n            />\n            <Button primary disabled={(!valContribution || !valBeneficiary || !allowBuy || !connection)} loading={buttonLoading}>\n              Buy Tokens!\n            </Button>\n        </Form.Field>\n      </Form>\n\n      <h3>\n        Tokens you bought: {tokensAmount}\n      </h3>\n\n      <h3>\n        Transaction hash: <a href={txnLink}>{txnHash ?  txnHash : \" \"}</a>\n      </h3>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}