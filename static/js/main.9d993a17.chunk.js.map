{"version":3,"sources":["App.js","index.js"],"names":["provider","undefined","signer","pluto","App","useState","connection","setConnection","totalContribution","setTotalContribution","chainID","setChainID","allowBuy","setAllowBuy","presalesStart","setPresalesStart","presalesEnd","setPresalesEnd","capReached","setCapReached","indvCap","setIndvCap","beneficiary","setBeneficiary","beneContributed","setBeneContributed","beneTokensAmount","setBeneTokensAmount","contribution","setContribution","valBeneficiary","setValBeneficiary","valContribution","setValContribution","buyButtonLoading","setBuyButtonLoading","refundButtonLoading","setRefundButtonLoading","withdrawButtonLoading","setWithdrawButtonLoading","txnLink","setTxnLink","txnHash","setTxnHash","contributed","setContributed","tokensAmount","setTokenAmounts","useEffect","load","setInterval","a","getNetwork","_chainID","getAddress","_address","getTokens","_tokensAmount","utils","formatUnits","getContribution","_contributed","formatEther","weiRaised","_totalContribution","getPresalesStarted","_presalesStart","getPresalesEnded","_presalesEnd","_capReached","_allowBuy","clearInterval","getProvider","e","providerOptions","walletconnect","package","WalletConnectProvider","options","rpc","56","network","chainId","infuraId","web3Modal","Web3Modal","cacheProvider","connect","_provider","ethers","providers","Web3Provider","getSigner","Contract","Pluto","networks","address","abi","buyPresalesTokens","preventDefault","gasLimit","value","tx","wait","txLink","hash","withdrawPresalesTokens","refundCapNotReached","refund","handleBeneficiary","_beneficiary","target","valid","isAddress","handleContribution","_contribution","_individualCap","parseFloat","parseEther","className","Button","negative","positive","onClick","Message","hidden","error","header","content","info","Form","Field","Input","onChange","placeholder","label","labelPosition","disabled","primary","loading","Card","Group","description","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d993a17.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { ethers, Contract , utils} from 'ethers';\nimport { Form, Input, Message, Button, Card } from 'semantic-ui-react';\nimport Pluto from './contracts/Pluto.json';\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport 'semantic-ui-css/semantic.min.css'\n\n// if use this, it does not connect to metamask after build\n//const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n// https://stackoverflow.com/questions/60785630/how-to-connect-ethers-js-with-metamask\n// let provider, signer, pluto;\n\n// try {\n//   window.ethereum.enable().then(provider = new ethers.providers.Web3Provider(window.ethereum, \"any\"));\n// } catch {\n//   provider = undefined;\n//   signer = undefined;\n//   pluto = undefined;\n// }\nlet provider = undefined;\nlet signer = undefined;\nlet pluto = undefined;\n\nfunction App() {\n  const [connection, setConnection] = useState(false);\n\n  const [totalContribution, setTotalContribution] = useState(0);\n  const [chainID, setChainID] = useState(undefined);\n\n  const [allowBuy, setAllowBuy] = useState(false);\n  const [presalesStart, setPresalesStart] = useState(false);\n  const [presalesEnd, setPresalesEnd] = useState(false);\n  const [capReached, setCapReached] = useState(false);\n  const [indvCap, setIndvCap] = useState(false);\n\n  // beneficiary's stats\n  const [beneficiary, setBeneficiary] = useState(undefined);\n  const [beneContributed, setBeneContributed] = useState(0);\n  const [beneTokensAmount, setBeneTokensAmount] = useState(0);\n  \n  const [contribution, setContribution] = useState(0);\n  const [valBeneficiary, setValBeneficiary] = useState(false);\n  const [valContribution, setValContribution] = useState(false);\n\n  const [buyButtonLoading, setBuyButtonLoading] = useState(false);\n  const [refundButtonLoading, setRefundButtonLoading] = useState(false);\n  const [withdrawButtonLoading, setWithdrawButtonLoading] = useState(false);\n\n  const [txnLink, setTxnLink] = useState(undefined);\n  const [txnHash, setTxnHash] = useState(undefined);\n\n  // current wallet's stats\n  const [contributed, setContributed] = useState(0);\n  const [tokensAmount, setTokenAmounts] = useState(0);\n\n  useEffect(() => {\n    const load = setInterval(async () => {\n      if (provider !== undefined) {\n        const _chainID = (await provider.getNetwork())[\"chainId\"];\n        if (_chainID === 97 || _chainID === 56){\n          setConnection(true);\n          const _address = await signer.getAddress();\n\n          let _tokensAmount = await pluto.getTokens(_address);\n          _tokensAmount = utils.formatUnits(_tokensAmount, 9);\n\n          let _contributed = await pluto.getContribution(_address);\n          _contributed = utils.formatEther(_contributed);\n\n          let _totalContribution = await pluto.weiRaised();\n          _totalContribution = utils.formatEther(_totalContribution);\n\n          const _presalesStart = await pluto.getPresalesStarted();\n          const _presalesEnd = await pluto.getPresalesEnded();\n          const _capReached = await pluto.capReached();\n\n          const _allowBuy = _presalesStart && !_presalesEnd;\n\n          setTokenAmounts(_tokensAmount);\n          setContributed(_contributed);\n          setTotalContribution(_totalContribution);\n          setPresalesStart(_presalesStart);\n          setPresalesEnd(_presalesEnd);\n          setAllowBuy(_allowBuy);\n          setCapReached(_capReached);\n          setConnection(true);\n        } else {\n          setConnection(false);\n        }\n      } else {\n        setConnection(false);\n      }\n    }, 1000);\n\n    return () => clearInterval(load);\n  }, []);\n\n  const getProvider = async (e) => {\n    let providerOptions = {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          rpc: {\n            56: 'https://data-seed-prebsc-1-s1.binance.org:8545/'\n          },\n          network: 'binance',\n          chainId: 56,\n          infuraId: \"1212\",\n        }\n      }\n    };\n\n    const web3Modal = new Web3Modal({\n      network: \"binance\",\n      cacheProvider: true, \n      providerOptions, \n    });\n\n    let _provider = await web3Modal.connect();\n    provider = new ethers.providers.Web3Provider(_provider, \"any\");\n    const _chainID = (await provider.getNetwork())[\"chainId\"];\n    signer = provider.getSigner();\n\n    if (_chainID === 97 || _chainID === 56){\n      pluto = new Contract(\n        Pluto.networks[_chainID].address,\n        Pluto.abi,\n        signer\n      );\n    }\n\n    setChainID(_chainID);\n  };\n\n  const buyPresalesTokens = async (e) => {\n    e.preventDefault();\n    setBuyButtonLoading(true);\n    const tx = await pluto.buyPresalesTokens(beneficiary, {gasLimit: 500000, value: contribution});\n    await tx.wait();\n\n    let txLink;\n    if (chainID === 97) {\n      txLink = \"https://testnet.bscscan.com/tx/\" + tx.hash;\n    } else if (chainID === 56) {\n      txLink = \"https://bscscan.com/tx/\" + tx.hash;\n    }\n\n    let _tokensAmount = await pluto.getTokens(beneficiary);\n    _tokensAmount = utils.formatUnits(_tokensAmount, 9);\n\n    let _contributed = await pluto.getContribution(beneficiary);\n    _contributed = utils.formatEther(_contributed);\n    \n    setBeneContributed(_contributed);\n    setBeneTokensAmount(_tokensAmount);\n    setTxnHash(tx.hash);\n    setTxnLink(txLink);\n    setBuyButtonLoading(false);\n  }\n\n  const withdrawPresalesTokens = async (e) => {\n    e.preventDefault();\n    setWithdrawButtonLoading(true);\n    const tx = await pluto.withdrawPresalesTokens(beneficiary, {gasLimit: 500000});\n    await tx.wait();\n\n    let txLink;\n    if (chainID === 97) {\n      txLink = \"https://testnet.bscscan.com/tx/\" + tx.hash;\n    } else if (chainID === 56) {\n      txLink = \"https://bscscan.com/tx/\" + tx.hash;\n    }\n\n    setTxnHash(tx.hash);\n    setTxnLink(txLink);\n    setWithdrawButtonLoading(false);\n  }\n\n  const refundCapNotReached = async (e) => {\n    e.preventDefault();\n    setRefundButtonLoading(true);\n    const tx = await pluto.refund(beneficiary, {gasLimit: 500000});\n    await tx.wait();\n\n    let txLink;\n    if (chainID === 97) {\n      txLink = \"https://testnet.bscscan.com/tx/\" + tx.hash;\n    } else if (chainID === 56) {\n      txLink = \"https://bscscan.com/tx/\" + tx.hash;\n    }\n\n    setTxnHash(tx.hash);\n    setTxnLink(txLink);\n    setRefundButtonLoading(false);\n  }\n\n  const handleBeneficiary = async (e) => {\n    let _beneficiary = e.target.value;\n    const valid = utils.isAddress(_beneficiary);\n    try {\n      if (valid) {\n        _beneficiary = utils.getAddress(_beneficiary);\n\n        let _tokensAmount = await pluto.getTokens(_beneficiary);\n        _tokensAmount = utils.formatUnits(_tokensAmount, 9);\n\n        let _contributed = await pluto.getContribution(_beneficiary);\n        _contributed = utils.formatEther(_contributed);\n        \n        setBeneContributed(_contributed);\n        setBeneTokensAmount(_tokensAmount);\n        setValBeneficiary(true);\n        setBeneficiary(_beneficiary);\n      } else {\n        setValBeneficiary(false);\n        setBeneficiary(0);\n      }\n    } catch {\n      setValBeneficiary(false);\n      setBeneficiary(0);\n    }\n  }\n\n  const handleContribution = async (e) => {\n    let _contribution = e.target.value;\n    try {\n      if (_contribution <= 0 || _contribution > 0.5) {\n        setValContribution(false);\n        setContribution(0);\n        setIndvCap(false);\n      } else {\n        let _contributed = await pluto.getContribution(beneficiary);\n        _contributed = utils.formatEther(_contributed);\n        const _individualCap = parseFloat(_contribution) + parseFloat(_contributed);\n        if (_individualCap > 0.5) {\n          setIndvCap(true);\n        } else {\n          setIndvCap(false);\n        }\n        _contribution = utils.parseEther(_contribution);\n        \n        setValContribution(true);\n        setContribution(_contribution);\n      }\n    } catch {\n      setValContribution(false);\n      setContribution(0);\n      setIndvCap(false);\n    }\n  }\n  \n  return (\n    <div className=\"App\">\n      <h1>Presales</h1>\n      <br></br>\n\n      <Button negative={!connection} positive={connection} onClick={getProvider}>Connect to Metamask</Button>\n\n      <Message hidden={connection} error={!connection} header=\"Opps!\" content={\"Please connect to BSC through Metamask!\"} />\n\n      <Message info hidden={presalesStart || !connection} header=\"Presales has not started yet\" />\n      <Message info hidden={!presalesEnd} header=\"Presales has already ended\" />\n      <Message header={\"Current Total Contribution\"} content={totalContribution + \" BNB\"} />\n \n      <Form>\n        <Form.Field>\n            <label>Beneficiary Address</label>\n            <Input\n                onChange={handleBeneficiary}\n                placeholder=\"Enter a valid BNB address\"\n            />\n\n            <label>Amount to Contribute</label>\n            <Input\n              onChange={handleContribution}\n              placeholder=\"MAX: 0.5 BNB per address (cumulative)\"\n              label=\"BNB\"\n              labelPosition=\"right\"\n              disabled={presalesEnd}\n            />\n\n            <Button primary disabled={!valContribution || !valBeneficiary || !allowBuy || !connection} loading={buyButtonLoading} onClick={buyPresalesTokens}>\n              Buy Tokens!\n            </Button>\n\n            <Button primary disabled={!(presalesEnd && capReached) || !valBeneficiary || !connection} loading={withdrawButtonLoading} onClick={withdrawPresalesTokens}>\n              Withdraw\n            </Button>\n\n            <Button primary disabled={!(presalesEnd && !capReached) || !valBeneficiary || !connection} loading={refundButtonLoading} onClick={refundCapNotReached}>\n              Refund\n            </Button>\n        </Form.Field>\n      </Form>\n\n      <Message hidden={!indvCap} error={true} header=\"Exceed individual limit!\" content={\"This transaction will fail because you exceeded individual limit. Enter a lower amount\"} />\n\n      <Card.Group>\n        <Card\n          header=\"Your stats\"\n          description={\n            <div>\n              <p>\n                Tokens bought: {tokensAmount}\n              </p>\n              <p>\n                BNB contributed: {contributed}\n              </p>\n            </div>\n          }\n        />\n\n        <Card\n          header=\"Beneficiary's stats\"\n          description={\n            <div>\n              <p>\n                Tokens bought: {beneTokensAmount}\n              </p>\n              <p>\n                BNB contributed: {beneContributed}\n              </p>\n            </div>\n          }\n        />\n      </Card.Group>\n\n      <h3>\n        Transaction hash: <a href={txnLink}>{txnHash ?  txnHash : \" \"}</a>\n      </h3>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}